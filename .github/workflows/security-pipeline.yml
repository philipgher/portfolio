name: Security Pipeline (OWASP Top 10 Coverage)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 0 * * 1' # Weekly Monday 02:00 UTC scan

permissions:
  contents: read

jobs:
  sast:
    name: Static Analysis (SAST)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: javascript
      - uses: github/codeql-action/analyze@v3

  dependency_scan:
    name: Dependency Audit (A06)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: npm Audit
        run: npm audit --audit-level=high || true

  iac_scan:
    name: IaC & Config Scan (A05)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Checkov Scan
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .

  dast:
    name: Dynamic Analysis (DAST) ZAP Full Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: OWASP ZAP Full Scan
        uses: zaproxy/action-full-scan@v0.12.0
        with:
          target: 'https://philipghering.nl'

# 1Ô∏è‚É£ ZAP API Scan
# Purpose: Targets API endpoints (REST, SOAP, GraphQL) rather than HTML web apps.
# How it works:
# You give it an OpenAPI/Swagger definition, SOAP WSDL, or a list of endpoints.
# ZAP spidering is skipped ‚Äî it uses the definition to know what to hit.
# Performs active scanning of those endpoints for vulnerabilities like injection, auth flaws, etc.
# When to use:
# Securing backend APIs before they‚Äôre exposed publicly.
# CI/CD testing of microservices without a UI.
# OWASP Top 10 focus: A01 (Broken Access Control), A03 (Injection), A07 (Auth Failures).

# 2Ô∏è‚É£ ZAP Baseline Scan
# Purpose: Quick, safe, passive scan of a web app.
# How it works:
# Runs a short spider (default ~1 min) to discover pages.
# Passive scan only ‚Äî inspects traffic for security issues without sending attack payloads.
# No form submissions, no destructive actions.
# When to use:
# On every pull request or commit to staging ‚Äî fast feedback without risk of breaking things.
# Continuous monitoring of a live site without impacting users.
# OWASP Top 10 focus: A02 (Crypto Failures), A05 (Misconfig), A06 (Outdated Components).

# 3Ô∏è‚É£ ZAP Full Scan
# Purpose: Comprehensive, active scan of a web app.
# How it works:
# Full spider (no time limit by default) + optional AJAX spider for JS-heavy sites.
# Active scan ‚Äî sends attack payloads to test for vulnerabilities.
# Will submit forms, follow links, and potentially trigger actions in the app.
# When to use:
# Scheduled scans against a staging environment you control.
# Pre-release security gate before production deploy.
# OWASP Top 10 focus: Broad coverage ‚Äî especially A01, A03, A07, A10 (SSRF).
# ‚ö†Ô∏è Warning: Because it‚Äôs aggressive, only run against systems you own and have permission to test.

# 4Ô∏è‚É£ ZAP Automation Framework Plan
# Purpose: Custom, scriptable DAST ‚Äî the most flexible option.
# How it works:
# You write a YAML ‚Äúplan‚Äù defining exactly what ZAP should do: which spiders, which active scans, which contexts, which rules to ignore, etc.
# Can chain multiple scans, set thresholds, integrate with other tools.
# When to use:
# Mature DevSecOps setups that need fine-grained control.
# Complex apps where you want to tailor scanning to specific flows or environments.
# OWASP Top 10 focus: Whatever you configure ‚Äî you can target specific categories or go broad.
# üí° How to slot them into a pipeline
# PR builds: Baseline Scan (fast, non-invasive)
# Nightly builds: Full Scan (deep, active)
# API services: API Scan
# Special cases / compliance: Automation Framework Plan

  secrets_scan:
    name: Secrets Detection
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # important so Gitleaks can scan full history
      - name: Gitleaks Scan
        uses: zricethezav/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # container_scan:
  #   name: Container Image Scan
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Scan with Trivy
  #       uses: aquasecurity/trivy-action@master
  #       with:
  #         image-ref: your-image:latest
